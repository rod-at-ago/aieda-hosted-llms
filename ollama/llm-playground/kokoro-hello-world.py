#!/usr/bin/env -S uv run --quiet --script
# /// script
# dependencies = [
#   "kokoro-onnx",
#   "soundfile",
#   "sounddevice",
# ]
# ///
"""
Kokoro Text-to-Speech Demo Script

This script demonstrates various Text-to-Speech capabilities using Kokoro.
It includes examples of single voice synthesis, phoneme-based synthesis,
and streaming synthesis.

Prerequisites:
Download the required model and voices files:
wget https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files/kokoro-v0_19.onnx
wget https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files/voices.json

Usage:
./kokoro-hello-world.py -h  # Show help
./kokoro-hello-world.py --model path/to/model.onnx --voices path/to/voices.json  # Run with required arguments
./kokoro-hello-world.py -v ...  # Run with INFO logging
./kokoro-hello-world.py -vv ...  # Run with DEBUG logging
"""

import asyncio
import logging
from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
from pathlib import Path

import sounddevice as sd
from kokoro_onnx import Kokoro

from logger import setup_logging


def parse_args():
    parser = ArgumentParser(
        description=__doc__, formatter_class=RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        dest="verbose",
        help="Increase verbosity of logging output",
    )
    parser.add_argument(
        "--model", type=Path, required=True, help="Path to the ONNX model file"
    )
    parser.add_argument(
        "--voices", type=Path, required=True, help="Path to the voices JSON file"
    )
    return parser.parse_args()


def main(kokoro: Kokoro):
    for voice in kokoro.get_voices():
        logging.info(f"Generating audio for voice: {voice}")
        samples, sample_rate = kokoro.create(
            "Hello. This audio generated by kokoro!",
            voice=voice,
            speed=1.0,
            lang="en-us",
        )
        sd.play(samples, sample_rate)
        sd.wait()
        # output_file = f"audio_{voice}.wav"
        # sf.write(output_file, samples, sample_rate)
        # print(f"Created {output_file}")


def main_play(kokoro: Kokoro):
    phonemes = "mˈʌsk sˈɛd ɪnðɪ ɑːktˈoʊbɚ twˈɛnti twˈɛnti θɹˈiː kˈɔːl."  # Musk said in the October 2023 call
    samples, sample_rate = kokoro.create(
        "", phonemes=phonemes, voice="af_sarah", speed=1.0, lang="en-us"
    )
    print("Playing audio...")
    sd.play(samples, sample_rate)
    sd.wait()


async def main_stream(kokoro: Kokoro):
    text = """
We've just been hearing from Matthew Cappucci, a senior meteorologist at the weather app MyRadar, who says Kansas City is seeing its heaviest snow in 32 years - with more than a foot (30 to 40cm) having come down so far.

Despite it looking as though the storm is slowly moving eastwards, Cappucci says the situation in Kansas and Missouri remains serious.

He says some areas near the Ohio River are like "skating rinks", telling our colleagues on Newsday that in Missouri in particular there is concern about how many people have lost power, and will lose power, creating enough ice to pull power lines down.

Temperatures are set to drop in the next several days, in may cases dipping maybe below minus 10 to minus 15 degrees Celsius for an extended period of time.

There is a special alert for Kansas, urging people not to leave their homes: "The ploughs are getting stuck, the police are getting stuck, everybody's getting stuck - stay home."
    """

    try:
        stream = kokoro.create_stream(
            text.strip(),  # Remove extra whitespace
            voice="am_michael",
            speed=1.0,
            lang="en-us",
        )

        total_chunks = 0
        async for samples, sample_rate in stream:
            total_chunks += 1
            try:
                logging.info(f"Playing audio chunk {total_chunks}...")
                sd.play(samples, sample_rate)
                sd.wait()
                if total_chunks % 5 == 0:  # Show progress every 5 chunks
                    logging.info(f"Progress: {total_chunks} chunks processed")
            except sd.PortAudioError as e:
                logging.error(f"Audio playback error: {e}")
                break
            except KeyboardInterrupt:
                logging.info("Playback interrupted by user")
                break

    except Exception as e:
        logging.error(f"Stream creation failed: {e}")
        return

    logging.info(f"Finished playing {total_chunks} audio chunks")


if __name__ == "__main__":
    args = parse_args()
    setup_logging(args.verbose)
    kokoro = Kokoro(model_path=args.model, voices_path=args.voices)
    main(kokoro)
    main_play(kokoro)
    asyncio.run(main_stream(kokoro))
